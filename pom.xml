<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.maven.study</groupId>
	<artifactId>Maven-Study</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<!-- This Name is shown when writing Info about this module instead of Artifact ID. Simplifies Logs on terminal. -->
	<name>Maven Study</name>
	<description>Maven Study Project - for understanding</description>
	<!-- 
		POM Packaging means this Parent module is just a POM file, and does not represent any other format(war, jar etc) 
		Does not produce anything, but include the other modules 
	-->
	<packaging>pom</packaging>

	<!-- ====================================================================== -->
	<!-- P R O J E C T  A G G R E G A T I O N                                   -->
	<!-- ====================================================================== -->
	<!--
		The Modules This POM includes

		For Project Aggregation, change Packaging from default of jar to 'pom'
		now, parent knows about inheriting projects as well.

		Project Aggregation : Project runs the same maven commands in all of it's modules
		Project Inheritance : Child Projects inherit what's not specifies from Parent Project.
	-->
	<modules>
		<module>core</module>
		<!--
		<module>ui.apps</module>
		<module>ui.content</module> -->
	</modules> 

	<!-- Properties are variables that i can use throught POM using Expression Language like syntax -->
	<properties>
		<aem.host>localhost</aem.host>
		<aem.port>4502</aem.port>
		<aem.publish.host>localhost</aem.publish.host>
		<aem.publish.port>4503</aem.publish.port>
		<aem.user>admin</aem.user>
		<aem.user.password>admin</aem.user.password>
		<maven.compile.source>1.8</maven.compile.source>
		<maven.compile.target>1.8</maven.compile.target>
		<maven.compiler.version>3.3</maven.compiler.version>
		<maven.groovy.version>2.3.6</maven.groovy.version>

		<!--
			In order to make build platform independent, Add the encoding for maven-compiler-plugin:3.3:compile and
			maven-resources-plugin:3.0.1:resources (default-resources) here

			[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!

			This or a similar warning is emitted by a plugin that processes plain text files but has not been configured
			to use a specific file encoding. So eliminating the warning
		-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<build>
		<!-- Plugins and Configurations Specific to the project, Won't be inherited -->
		<plugins>
			<!-- Maven Compiler Plugin, used to compile the Java Classes in Projects -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- 
                	Version is important here, having no version means maven will Take default Version of plugin 
                	To check what version maven uses, this gives the output
                	mvn help:describe -DartifactId=maven-compiler-plugin -DgroupId=org.apache.maven.plugins
                -->
                <version>3.3</version>
                <configuration>
                	<!-- Source means compile assuming input class has syntax of Java 1.8 
                	Target means it will run on JVM Version 1.8 -->
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                	<!-- Source means compile assuming input class has syntax of Java 1.8 
                	Target means it will run on JVM Version 1.8 -->
                    <source>${maven.compile.source}</source>
                    <target>${maven.compile.target}</target>
                </configuration>
            	</plugin>
            	<!-- Apache Felix Bundle Plugin : Enable 'mvn package' on Project -->
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <!-- Only given version here. Configuration on Core bundle. -->
                    <version>2.5.3</version>
                </plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>